<?php

/**
 * @file tic.module
 * TODO: Enter file description here.
 */

/**
 * Implements hook_menu().
 */
function tic_menu() {
  $items['example'] = array(
    'title' => 'Example Page',
    'page callback' => 'example_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['tic/test1'] = array(
    'title' => 'Example Page',
    'page callback' => 'tic_test1',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['example/feed'] = array(
    'title' => 'Example RSS feed',
    'page callback' => 'example_feed',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_cron().
 */
function tic_cron() {
  // Short-running operation example, not using a queue:
  // Delete all expired records since the last cron run.
  $expires = variable_get('mymodule_cron_last_run', REQUEST_TIME);
  db_delete('mymodule_table')
      ->condition('expires', $expires, '>=')
      ->execute();
  variable_set('mymodule_cron_last_run', REQUEST_TIME);

  // Long-running operation example, leveraging a queue:
  // Fetch feeds from other sites.
  $result = db_query('SELECT * FROM {aggregator_feed} WHERE checked + refresh < :time AND refresh <> :never', array(
    ':time' => REQUEST_TIME,
    ':never' => AGGREGATOR_CLEAR_NEVER,
  ));
  $queue = DrupalQueue::get('aggregator_feeds');
  foreach ($result as $feed) {
    $queue->createItem($feed);
  }
}

function xxtic_test1() {

//  
////   define("EFEED", 'http://mydrupal.utoronto.ca/some_endpoint/some_view');
//
////Get consumer key and secret from Drupal
////- People ➔ [Your OAuth User] ➔ Authorization ➔ Consumers ➔ Edit under your external application's Consumer
////- Copy the secret and key into PHP
//$consumer_key = '8NMxrPkxdU8GAaLvsaP5qDKeLdVfRvWr';
//$consumer_secret = '2G79cLpxsH4tuL2Mtv6G9h9QURGjMb3R';
//
////Instantiate new OAuth object
//$oauth = new OAuth($consumer_key, $consumer_secret, OAUTH_SIG_METHOD_HMACSHA1, OAUTH_AUTH_TYPE_URI);
//$oauth->enableDebug();
//
////Fetch the REST resource
////$data = $oauth->fetch(EFEED);
//$data = $oauth->fetch('http://ssp.singprof.val/test/test');
//
//
//$response_info = $oauth->getLastResponse();
//$array = json_decode($response_info);
//
//dpm($array);
//
////Parse the JSON array
//if ($array) {
//  $object = $array[0]; // The array could contain multiple instances of your content type
//  $title = $object->title; // title is a field of your content type
//}
//  
//  
//  
//
  $base_url = 'http://server.singprof.val/test';
  $data = array(
    'username' => 'admin',
    'password' => 'letmein',
  );
  $data = http_build_query($data, '', '&');
  $headers = array();
  $options = array(
    'headers' => array(
      'Accept' => 'application/json',
    ),
    'method' => 'POST',
    'data' => $data
  );
  $response = drupal_http_request($base_url . '/user/login', $options);
  $data = json_decode($response->data);

  dpm($data);

// Check if login was successful
  if ($response->code == 200) {
    // Now recycle the login cookie we recieved in the first request
    $options['headers']['Cookie'] = $data->session_name . '=' . $data->sessid;

    // Get info about a user
//  $data = array();
//  $options['data'] = http_build_query($data, '', '&');
//  $options['method'] = 'GET';
//  $response = drupal_http_request($base_url . '/user/3', $options);
//  
//  dpm($response);
    // Create a user
    $account = array(
      'name' => 'test_user',
      'pass' => 'xyzzy',
      'mail' => 'test_user@xyzzy.com',
    );
    $options['data'] = http_build_query($account = array('account' => $account), '', '&');
    $options['method'] = 'POST';

    $response = drupal_http_request($base_url . '/user', $options);
    dpm($response);
//  
//  
  }


  /*
   * Server REST - user.login
   */
// REST Server URL
  $request_url = 'http://server.singprof.val/test/user/login';
// User data
  $user_data = array(
    'username' => 'admin',
    'password' => 'letmein',
  );
  $user_data = http_build_query($user_data);
// cURL
  $curl = curl_init($request_url);
  curl_setopt($curl, CURLOPT_HTTPHEADER, array('Accept: application/json', tic_get_csrf_header())); // Accept JSON response
  curl_setopt($curl, CURLOPT_POST, 1); // Do a regular HTTP POST
  curl_setopt($curl, CURLOPT_POSTFIELDS, $user_data); // Set POST data
  curl_setopt($curl, CURLOPT_HEADER, FALSE);  // Ask to not return Header
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($curl, CURLOPT_FAILONERROR, TRUE);
  $response = curl_exec($curl);
  $http_code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
// Check if login was successful
  if ($http_code == 200) {
    // Convert json response as array
    $logged_user = json_decode($response);

    dpm($logged_user);
  }
  else {
    // Get error msg
    $http_message = curl_error($curl);
    die($http_message);
  }


  /*
   * Server REST - node.create
   */
// REST Server URL
  $request_url = 'http://server.singprof.val/test/node';
// Node data
  $node_data = array(
    'title' => 'A node created with services 3.x and REST server',
    'type' => 'article',
    'body[und][0][value]' => '<p>Body</p>',
  );
  $node_data = http_build_query($node_data);
// Define cookie session
  $cookie_session = $logged_user->session_name . '=' . $logged_user->sessid;

  dsm($cookie_session);

// cURL
  $curl = curl_init($request_url);
  curl_setopt($curl, CURLOPT_HTTPHEADER, array('Accept: application/json', tic_get_csrf_header())); // Accept JSON response
  curl_setopt($curl, CURLOPT_POST, 1); // Do a regular HTTP POST
  curl_setopt($curl, CURLOPT_POSTFIELDS, $node_data); // Set POST data
  curl_setopt($curl, CURLOPT_HEADER, FALSE);  // Ask to not return Header
  curl_setopt($curl, CURLOPT_COOKIE, "$cookie_session"); // use the previously saved session
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($curl, CURLOPT_FAILONERROR, TRUE);
  $response = curl_exec($curl);
  dpm($response);
  $http_code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
  dsm($http_code);
//// Check if login was successful
//if ($http_code == 200) {
//  // Convert json response as array
//  $node = json_decode($response);
//}
//else {
//  // Get error msg
//  $http_message = curl_error($curl);
//  die($http_message);
//}
//print_r($node);

  $build = array();
  $build['test']['#markup'] = 'test';
  return $build;
}

/**
 * Create a token for non-safe REST calls.
 * */
function tic_get_csrf_header() {
  $curl_get = curl_init();
  curl_setopt_array($curl_get, array(
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_URL => 'http://server.singprof.val/services/session/token',
  ));
  $csrf_token = curl_exec($curl_get);
  curl_close($curl_get);
  return 'X-CSRF-Token: ' . $csrf_token;
}

function tic_test1() {

//  
//  $base_url = 'http://server.singprof.val/test';
//$data = array(
//  'username' => 'admin',
//  'password' => 'letmein',
//);
//$data = http_build_query($data, '', '&');
//$headers = array();
//$options = array(
//  'headers' => array(
//    'Accept' => 'application/json',
//  ),
//  'method' => 'POST',
//  'data' => $data
//);
//$response = drupal_http_request($base_url . '/user/login', $options);
//$data = json_decode($response->data);
//
//dpm($data);
//
//// Check if login was successful
//if ($response->code == 200) {
//  // Now recycle the login cookie we recieved in the first request
//  $options['headers']['Cookie'] = $data->session_name . '=' . $data->sessid;
//   Get info about a user
//  $data = array();
//  $options['data'] = http_build_query($data, '', '&');
//  $options['method'] = 'GET';
//  $response = drupal_http_request($base_url . '/user/3', $options);
//  
//  dpm($response);
  // Create a user
//$account = array(
//      'name' => 'test_user',
//      'pass' => 'xyzzy',
//      'mail' => 'test_user@xyzzy.com',
//    );
//  $options['data'] = http_build_query($account=array('account'=>$account), '', '&');
//  $options['method'] = 'POST';
//
//  $response = drupal_http_request($base_url . '/user', $options);
//  dpm($response);
//}
//  
//  $connection = clients_connection_load('single_profile_server');
////  try {
////    $result = $connection->callMethod('node.get', 1, array());
////  }
////  catch (Exception $e) {
////    drupal_set_message("Error calling method.name. {$e}");
////  }
//
//  dpm($connection);
//
//  try {
////    $node = clients_connection_call('single_profile_server', 'GET', '1');
//     $node = $connection->makeRequest('node/' . '1', 'GET');
//     // Note that the $node will be an array.
//  }
//  catch (Exception $e) {
//    drupal_set_message("Error loading a remote node. {$e}");
//  }
//
//  // $node = clients_connection_call('single_profile_server', 'node.index', 1);
//  // Note that the $node will be an array.
//  // dpm($node);
//
////  try {
////    $result = $connection->callMethod('user.get', 2);
////  }
////  catch (Exception $e) {
////    drupal_set_message("Error calling method.name.");
////  }
//  /* GET USER */
//  $get_user_result = tic_get_user();
//  dpm($get_user_result);
//  $data = json_decode($get_user_result->data);
//  dpm($data);

  /* GET USER */
//  $get_user_result = tic_get_user();
//  dpm($get_user_result);
//  $data = json_decode($get_user_result->data);
//  dpm($data);

  /* UPDATE USER */
//  $get_user_result = tic_update_user();
//  dpm($get_user_result);
//  $data = json_decode($get_user_result->data);
//  dpm($data);
  // /* UPDATE NODE */
  $update_node_result = tic_update_node();
  dpm($update_node_result);
  $data = json_decode($update_node_result->data);
  dpm($data);


  /* GET NODE */
  $get_node_result = tic_get_node();
  dpm($get_node_result);
  $data = json_decode($get_node_result->data);
  dpm($data);
//  $wrpuser = entity_metadata_wrapper('user', $data[0]);
//  
//  dsm($wrpuser->field_first_name->value());
//tic_get_articles

  /* GET BLOGS */
//  $get_blogs_result = tic_get_articles();
//  dpm($get_blogs_result);
//  $data = json_decode($get_blogs_result->data);
//  dpm($data);


  $build = array();
  $build['test']['#markup'] = 'test';
  return $build;
}

/**
 * @file
 * Web Services Testing
 */
function tic_block_info() {
  $blocks['tic'] = array('info' => t('Web Services Testing'));
  return $blocks;
}

function tic_block_view($delta = '') {
  $block['content'] = '<h1>Web Services Testing</h1>';

  /* GET NODE */
  $get_node_result = tic_get_node();
  dpm($get_node_result);
  $data = json_decode($get_node_result->data);
  dpm($data);

  // /* CREATE NODE */
  $create_node_result = tic_create_node();
  dpm($create_node_result);

  // /* UPDATE NODE */
  $update_node_result = tic_update_node();
  dpm($update_node_result);

  /* DELETE NODE */
  // $delete_node_result = tic_delete_node();
  // dpm($delete_node_result);

  return $block;
}

/* RETRIVE node with http GET method */

function tic_get_node() {
  $url = 'http://server.singprof.val/test/node/2';
//  $parameters = '?parameters[nid]=2';
//  $url .= $parameters;
  return drupal_http_request($url);
}

/* RETRIVE user with http GET method */

function tic_get_user() {
  $url = 'http://server.singprof.val/test/user/3';
//  $parameters = '?parameters[uid]=3'; // TODO figure out how/if to use parameters
//  $url .= $parameters;

  $login_data = tic_login('admin', 'letmein');

  //dpm($login_data);

  $user_options = array(
    'headers' => array(
      'Content-Type' => 'application/json',
      'Cookie' => $login_data['cookie'],
      'X-CSRF-Token' => $login_data['token'],
    ),
    'method' => 'GET',
//		'data' => $node_data,
  );
  return drupal_http_request($url, $user_options);
}

/* RETRIVE user with http GET method */

function tic_get_articles() {
  $url = 'http://server.singprof.val/test/blogs/retrieve';
  $parameters = '?nitems=3&since=10';
  $url .= $parameters;

  $login_data = tic_login('admin', 'letmein');

  //dpm($login_data);

  $user_options = array(
    'headers' => array(
      'Content-Type' => 'application/json',
      'Cookie' => $login_data['cookie'],
      'X-CSRF-Token' => $login_data['token'],
    ),
    'method' => 'GET',
//		'data' => $node_data,
  );
  return drupal_http_request($url, $user_options);
}

/* CREATE node with http POST method */

function tic_create_node() {
  $url = 'http://server.singprof.val/test/node';

  $node_type = 'article';
  $node_title = 'Node updated: ' . date('c');
  $node_body = 'Node body';
  $node_format = 'filtered_html';

  $node_data = '{
		"type" : "' . $node_type . '",
		"title" : "' . $node_title . '",
		"body" : {
			"und" : {
				"0" : {
					"value" : "' . $node_body . '",
					"format" : "' . $node_format . '"
				}
			}
		}
	}';


  $login_data = tic_login('admin', 'letmein');

  //dpm($login_data);

  $node_options = array(
    'headers' => array(
      'Content-Type' => 'application/json',
      'Cookie' => $login_data['cookie'],
      'X-CSRF-Token' => $login_data['token'],
    ),
    'method' => 'POST',
    'data' => $node_data,
  );


  return drupal_http_request($url, $node_options);
}

/* UPDATE node with http PUT method */

function tic_update_node() {

  $node_nid = 2;
  $url = 'http://server.singprof.val/test/node/' . $node_nid;

  $node_data = array(
    'type' => 'article',
    'title' => 'Nodezz updated: ' . date('c'),
    'body' => array(
      'value' => 'test bod',
      'format' => 'plain_text',
    )
  );


  $snode_data = '{
		"type" : "article",
		"title" : "test",
		"body" :  {
					"value" : "test bod",
					"format" : "text"
			
		}
	}';

  $login_data = tic_login('admin', 'letmein');

  $node_options = array(
    'headers' => array(
      'Content-Type' => 'application/json',
      'Cookie' => $login_data['cookie'],
      'X-CSRF-Token' => $login_data['token'],
    ),
    'method' => 'PUT',
    //'data' => $node_data,
          'data' => json_encode($node_data),
  );


  return drupal_http_request($url, $node_options);
}

/* UPDATE node with http PUT method */

function tic_update_user() {

  $uid = 3;
  $url = 'http://server.singprof.val/test/user/' . $uid;

  $user_data = array(
    'name' => 'john2',
    'mail' => 'hallo2@hallo.nl',
    'first_name' => 'Jimboke',
  );

  $login_data = tic_login('admin', 'letmein');

  $user_options = array(
    'headers' => array(
      'Content-Type' => 'application/json',
      'Cookie' => $login_data['cookie'],
      'X-CSRF-Token' => $login_data['token'],
    ),
    'method' => 'PUT',
    'data' => json_encode($user_data),
  );


  return drupal_http_request($url, $user_options);
}

/* DELETE node with http DELETE method */

function tic_delete_node() {

  $node_nid = 3;
  $url = 'http://server.singprof.val/test/node/' . $node_nid;

  $login_data = tic_login('admin', 'admin');

  $node_options = array(
    'headers' => array(
      'Content-Type' => 'application/json',
      'Cookie' => $login_data['cookie'],
      'X-CSRF-Token' => $login_data['token'],
    ),
    'method' => 'DELETE'
  );


  return drupal_http_request($url, $node_options);
}

/* LOGIN with POST method */

function tic_login($username, $password) {

  if (isset($_COOKIE['drupal_session_name']) && isset($_COOKIE['drupal_session_id']) && isset($_COOKIE['drupal_session_token'])) {
    $cookie = '' . $_COOKIE['drupal_session_name'] . '=' . $_COOKIE['drupal_session_id'] . '';
    return array('cookie' => $cookie, 'token' => $_COOKIE['drupal_session_token']);
    //return '' . $_COOKIE['drupal_session_name'] . '=' . $_COOKIE['drupal_session_id'] . '';
  }
  else {
    $login_url = 'http://server.singprof.val/test/user/login';

    $user_data = '{
			"username" : "' . $username . '",
			"password" : "' . $password . '"
		}';

    $user_options = array(
      'headers' => array(
        'Content-Type' => 'application/json'),
      'method' => 'POST',
      'data' => $user_data
    );
  };

  $result = drupal_http_request($login_url, $user_options);


  if ($result->code == 200) {
    $user_data = json_decode($result->data);

    setcookie('drupal_session_name', $user_data->session_name);
    setcookie('drupal_session_id', $user_data->sessid);

    $cookie = '' . $user_data->session_name . '=' . $user_data->sessid . '';

    $token_options = array(
      'headers' => array(
        'Cookie' => $cookie,
      ),
      'method' => 'GET',
    );

    $token = drupal_http_request('http://server.singprof.val/services/session/token', $token_options);

    setcookie('drupal_session_token', $token->data);

    return array('cookie' => $cookie, 'token' => $token->data);
    //return '' . $user_data->session_name . '=' . $user_data->sessid . '';
  }
  else
    return FALSE;
}
