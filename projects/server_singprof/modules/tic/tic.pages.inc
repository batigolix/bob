<?php

/**
 * @file
 * TODO Auto generated file, add description.
 */

/**
 * TODO Autogenerated function.
 */
function tic_test_stuff() {

  
//  if (module_exists('ec_world_countries')) {
//    $vocab = taxonomy_vocabulary_machine_name_load('ec_world_countries');
//    include_once(DRUPAL_ROOT . '/' . drupal_get_path('module', 'ec_world_countries') . '/includes/countries.php');
//    foreach ($country_array as $continent => $countries) {
//      $term = (object) array('vid' => $vocab->vid, 'name' => $continent,);
//      taxonomy_term_save($term);
//      $parent_tid = $term->tid;
//      foreach ($countries as $country => $cy_name) {
//        $values = array(
////          'type' => 'ec_world_countries',
//          'vocabulary_machine_name' => 'ec_world_countries',
//        );
//        $entity = entity_create('taxonomy_term', $values);
//        dpm($entity);
//        $ewrapper = entity_metadata_wrapper('taxonomy_term', $entity);
//        $ewrapper->name->set($cy_name);
//        $ewrapper->field_code->set($country);
//        $ewrapper->parent->set($parent_tid);
//        $ewrapper->vid->set($vocab->vid);
//        $ewrapper->bundle->set('ec_world_countries');
//        $ewrapper->save();
//      }
//    }
  //}

  
  $build = array();

//  // instantiate the query using our extended query object
//  $query = new EntityFieldQuery();
//  // let our query know which node types we want
//  $query->entityCondition('entity_type', 'node')
//      ->entityCondition('bundle', array('page', 'article', 'blog_post'))
//      ->propertyCondition('status', 1)
//      ->propertyOrderBy('created', 'DESC');
//  $query->range(0, 5);
//
//  // execute the query
//  $result = $query->execute();
//  // return the nodes as teasers
//  if (!empty($result['node'])) {
//    $items = array();
//    foreach (node_load_multiple(array_keys($result['node'])) as $node) {
//      dpm($node);
//      $mark = theme('mark', array('type' => node_mark($node->nid, $node->changed)));
//      dpm($mark);
//      $items[] = l($node->title, 'node/' . $node->nid) . ' ' . node_last_viewed($node->nid) . $mark;
//
////$items[] = theme_node_recent_content(array('node'=>$node));
//    }
//    $build['node_list'] = array('#theme' => 'item_list', '#items' => $items, '#title' => 'Doh');
////    $build['nodes'] = node_view_multiple(node_load_multiple(array_keys($result['node'])), 'teaser');
////    $build['pager']['#markup'] = theme('pager', $query->pager);
//  }
//  else {
//    $build['status']['#markup'] = t('No results were returned.');
//  }


  $build['content']['doh']['#markup'] = t('Hello world');
  return $build;
}

function zztic_test_stuff() {
  $build = array();
  $build['status']['#markup'] = t('test');
  $query = db_select('context', 'c');
  $query->fields('c');
  $query->condition('c.reactions', '%jtweetsan%', 'LIKE');
//  $query->condition('c.name', 'startup_europe');
//  $query->range(24, 12);
  $result = $query->execute();
  if (variable_get('debug_mode') == 1) {
    dpm((string) $query);
    dpm($query->arguments());
  }
  $contexts = array();
  foreach ($result as $row) {
    $row->reactions_unfolded = unserialize($row->reactions);
    $contexts[] = $row;
  }
//  dpm($contexts);

  foreach ($contexts as $context) {
    //  dsm($context->reactions);
    $reactions = $context->reactions_unfolded;

    // Use shorthand
    $cct = $reactions['connect_chapters_taxonomy']['twitter'];
    $mstb = array();

    if ($cct['social_media_twitter_display']) {
      $mstb['enabled'] = $cct['social_media_twitter_display'];
      $mstb['config']['title'] = $cct['jtweetsanywhere_twitter_block_title'];

      // @TODO decide importance order 
      if (!empty($cct['jtweetsanywhere_twitter_search'])) {
        $mstb['config']['type'] = 'smk-twitter_search';
        $mstb['config']['smk-twitter_search']['incl_hashtags'] = _tic_fix_string($cct['jtweetsanywhere_twitter_search']);
      }
      elseif (!empty($cct['jtweetsanywhere_twitter_list'])) {
        $mstb['config']['type'] = 'smk-twitter_list_timeline';
        $mstb['config']['smk-twitter_list_timeline']['slug'] = $cct['jtweetsanywhere_twitter_list'];
        $mstb['config']['smk-twitter_list_timeline']['owner_screen_name'] = $cct['jtweetsanywhere_twitter_id'];
      }
      elseif (!empty($cct['jtweetsanywhere_twitter_id'])) {
        $mstb['config']['type'] = 'smk-twitter_user_timeline';
        $mstb['config']['smk-twitter_user_timeline']['screen_name'] = $cct['jtweetsanywhere_twitter_id'];
      }
      else { // arrrr. jtweets falls back to searching title?
        $mstb['config']['type'] = 'smk-twitter_search';
        $mstb['config']['smk-twitter_search']['incl_hashtags'] = $cct['jtweetsanywhere_twitter_block_title'];
      }
    }
    // Use long hand
    $reactions['multisite_twitterblock'] = $mstb;

// @TODO: what to unset and what to remove
//    unset($reactions['connect_chapters_taxonomy']['twitter']);
//    dpm($reactions);
    $reactions_folded = serialize($reactions);
//    dsm($reactions_folded);

    if (variable_get('do_update')) {
      db_merge('context')
          ->key(array('name' => $context->name))
          ->fields(array(
            'reactions' => $reactions_folded,
          ))
          ->execute();
    }
  }


  return $build;
}

function tic_test_stuff2() {
  $build = array();

  $build['doh']['#markup'] = 'test';
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', array('chapters'))
      ->fieldCondition('field_chapter_display_twitter', 'value', 1, '='); // @TODO check can we assume this??
  //$query->range(3, 9);

  $result = $query->execute();
  if (!empty($result['taxonomy_term'])) {
    $items = array();
    foreach (taxonomy_term_load_multiple(array_keys($result['taxonomy_term'])) as $term) {

      $wrapper = entity_metadata_wrapper('taxonomy_term', $term);
//      dsm($wrapper->field_chapter_twitter_search->value());
//      dpm($wrapper->getPropertyInfo());
      $term->fpfis_twitter_override['enabled'] = TRUE;
      $term->fpfis_twitter_override['config']['title'] = $wrapper->field_chapter_twitter_title->value();
      // @TODO decide importance order 
      if ($wrapper->field_chapter_twitter_search->value()) {
        dsm('ping');
        $term->fpfis_twitter_override['config']['type'] = 'smk-twitter_search';
        $term->fpfis_twitter_override['config']['smk-twitter_search']['incl_hashtags'] = _tic_fix_string($wrapper->field_chapter_twitter_search->value());
      }
      elseif ($wrapper->field_chapter_twitter_list->value()) {
        $term->fpfis_twitter_override['config']['type'] = 'smk-twitter_list_timeline';
        $term->fpfis_twitter_override['config']['smk-twitter_list_timeline']['slug'] = $wrapper->field_chapter_twitter_list->value();
        $term->fpfis_twitter_override['config']['smk-twitter_list_timeline']['owner_screen_name'] = $wrapper->field_chapter_twitter_id->value();
      }
      elseif ($wrapper->field_chapter_twitter_id->value()) {
        $term->fpfis_twitter_override['config']['type'] = 'smk-twitter_user_timeline';
        $term->fpfis_twitter_override['config']['smk-twitter_user_timeline']['screen_name'] = $wrapper->field_chapter_twitter_id->value();
        $term->fpfis_twitter_override['config']['screen_name'] = $wrapper->field_chapter_twitter_id->value();
      }
      else { // arrrr. jtweets falls back to searching title?
        $term->fpfis_twitter_override['config']['type'] = 'smk-twitter_search';
        $term->fpfis_twitter_override['config']['smk-twitter_search']['incl_hashtags'] = $wrapper->field_chapter_twitter_title->value();
      }

      dpm($term);

      if (variable_get('do_update')) {

        // @TODO. decide if 

        multisite_twitterblock_taxonomy_term_update($term);
      }

//      $term['fpfis_twitter_override']  = array (
//        'enabled' => TRUE,
//        'config' => array(
//          'title' => 'test',
//        ),
//      );
//      $mark = theme('mark', array('type' => node_mark($node->nid, $node->changed)));
//      dpm($mark);
//      $items[] = l($node->title, 'node/' . $node->nid) . ' ' . node_last_viewed($node->nid) . $mark;
//$items[] = theme_node_recent_content(array('node'=>$node));
    }
  }

  return $build;
}

function _tic_fix_string($string) {
  $string = urldecode($string);
  $search = array('q=', 'OR', ' ', '+', '#');
  $replace = array('', ',', '', ',', '');
  return str_replace($search, $replace, $string);
}

function tic_test_stuff3() {

  $fields_2b_kicked_out = array(
    'field_chapter_facebook_link',
    'field_chapter_display_twitter',
    'field_chapter_linkedin_link',
    'field_chapter_twitter_appid',
    'field_chapter_twitter_id',
    'field_chapter_twitter_list',
    'field_chapter_twitter_search',
    'field_chapter_twitter_title',
    'field_chapter_display_blog',
  );

  foreach ($fields_2b_kicked_out as $field) {
    if ($instance = field_info_instance('taxonomy_term', $field, 'chapters')) {
      dsm('hit');
      field_delete_instance($instance);
    }
  }

  $groups_2b_kicked_out = array(
    'group_chapter_twitter',
    'group_chapter_social_media',
  );

  foreach ($groups_2b_kicked_out as $group) {
    if ($group = field_group_load_field_group($group, 'taxonomy_term', 'chapters', 'form')) {
      dsm('yep');
      ctools_include('export');
      field_group_group_export_delete($group, FALSE);
    }
  }

  field_purge_batch();

  $build = array();
  $build['test']['#markup'] = 'test';
  return $build;
}

function tic_test_stuff4() {

  // Fetches all the country terms.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', array('country'));
  $result = $query->execute();
  if (!empty($result['taxonomy_term'])) {
    $items = array();
    foreach (taxonomy_term_load_multiple(array_keys($result['taxonomy_term'])) as $country) {
      // Operates on all country terms that have an original topic id.
      if ($country->field_country_newsroom_origin_id) {
        //dsm($country->name . ' has it');
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'taxonomy_term')
            ->entityCondition('bundle', array('newsroom_topic'))
            ->fieldCondition('field_newsroom_topic_id', 'value', $country->field_country_newsroom_origin_id[LANGUAGE_NONE][0]['value']);
        $result = $query->execute();
        if (!empty($result['taxonomy_term'])) {
          $i = 0;

          foreach (array_keys($result['taxonomy_term']) as $topic) {
          dsm($topic);
            
            $country->field_associated_newsroom_topic[LANGUAGE_NONE][0]['tid']=$topic;
            
            $save = taxonomy_term_save($country);
dsm($save);
            // Only use 1st result in case there are more results
            $i++;
            if ($i == 1) break;
          }
        }
      }
      else {
        // dsm($country->name.' has it not');
      }
    }
  }

  /*
    $newsroom_importers = array(
    array(
    'title' => 'Digital Agenda newsroom service importer',
    'url' => 'http://ec.europa.eu/information_society/newsroom/cf/dae/rss-service.cfm',
    'type' => 'newsroom_service_importer',
    ),
    array(
    'title' => 'Digital Agenda newsroom topic importer',
    'url' => 'http://ec.europa.eu/information_society/newsroom/cf/dae/rss-service.cfm',
    'type' => 'newsroom_topic_importer',
    ),
    array(
    'title' => 'Digital Agenda newsroom type importer',
    'url' => 'http://ec.europa.eu/information_society/newsroom/cf/dae/rss-item-type.cfm',
    'type' => 'newsroom_type_importer',
    ),
    array(
    'title' => 'Digital Agenda newsroom item importer',
    'url' => 'http://ec.europa.eu/information_society/newsroom/cf/dae/fullrss.cfm?n=200',
    'type' => 'newsroom_item_importer',
    ),
    );

    foreach ($newsroom_importers as $importer) {
    $node = new stdClass();
    $node->type = $importer['type'];
    node_object_prepare($node);
    $node->title = $importer['title'];
    $node->language = LANGUAGE_NONE;
    //    $node->field_url[$node->language][0]['value'] = $importer['url'];
    dpm($node);
    //    node_save($node);
    }
   */
  $build = array();
  $build['test']['#markup'] = 'test';
  return $build;
}
