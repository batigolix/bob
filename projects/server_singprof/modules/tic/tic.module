<?php

/**
 * @file
 * Main bootstrap file of the tic module.
 */

/**
 * Implements hook_menu().
 *
 */
function tic_menu() {
  $menu = array();

  $menu['tic/test'] = array(
    'title' => 'TIC test stuff',
    'description' => 'Test tic stuff and such',
    'page callback' => 'tic_test_stuff',
    'access arguments' => array('access administration pages'),
    'file' => 'tic.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['tic/test2'] = array(
    'title' => 'TIC test stuff',
    'page callback' => 'tic_test_stuff2',
    'access arguments' => array('access administration pages'),
    'file' => 'tic.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['tic/test3'] = array(
    'title' => 'TIC test stuff',
    'page callback' => 'tic_test_stuff3',
    'access arguments' => array('access administration pages'),
    'file' => 'tic.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['tic/test4'] = array(
    'title' => 'TIC test stuff',
    'page callback' => 'tic_test_stuff4',
    'access arguments' => array('access administration pages'),
    'file' => 'tic.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );

  return $menu;
}

function XXXXtic_init() {
  drupal_add_js('https://ec.europa.eu/wel/surveys/wr_survey01/wr_survey.js', array(
    'type' => 'external',
    'scope' => 'header',
    'group' => JS_THEME,
    'every_page' => TRUE,
    'weight' => -99,
  ));
}

/*

  function tic_url_outbound_alter(&$path, &$options, $original_path) {

  dsm('abc');

  if (preg_match('|^taxonomy/term/([0-9]*)|', $path, $matches)) {
  // Alter $path; $matches[1] contains the term ID.
  }
  }

  function tic_url_inbound_alter(&$path, $original_path, $path_language) {
  dsm($path);
  dsm('xyz');
  // Revert the change done in mymodule_url_outbound_alter().

  if (preg_match('|^taxonomy/term/([0-9]*)|', $path, $matches)) {
  // Alter $path; $matches[1] contains the term ID.
  }


  }

 */

/**
 * * Implementation of hook_menu_alter(). 
 */
function XXXtic_menu_alter(&$menu) {
  print('ticssssdfsdf');
  dsm('ticdddyipaaSS');
  drupal_set_message('ticsadsadv');
  dpm($menu);
  if (isset($menu['taxonomy/term/%'])) {
    dsm('yipaa');
    $menu['taxonomy/term/%']['page callback'] = 'connect_country_taxonomy_term_page';
//    $menu['taxonomy/term/%']['access callback'] = 'mymodule_access_term_pages';
//    $menu['taxonomy/term/%']['access arguments'] = array(2);
    $menu['taxonomy/term/%']['file'] = 'connect_country.pages.inc';
  }
}

function XXXtic_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'menu_alter') {
    $group = $implementations['tic'];
    unset($implementations['tic']);
    $implementations['tic'] = $group;
  }
}

//$modules = module_list($refresh = FALSE, $bootstrap_refresh = FALSE, $sort = FALSE, $fixed_list = NULL);
//dpm($modules);

function XXXtic_preprocess_node(&$vars) {
  dpm($vars);
//  
  dsm($vars['created']);
  dsm(format_date($vars['created'], 'custom', 'Y-m-d H:i:s O'));
//  dsm(format_date($vars['changed'], 'custom', 'Y-m-d H:i:s O'));
//  dsm(format_date($vars['revision_timestamp'], 'custom', 'Y-m-d H:i:s O'));
//  dsm(format_date($vars['workbench_moderation']['current']->timestamp, 'custom', 'Y-m-d H:i:s O'));
  //dpm($vars['workbench_moderation']['current']->published);
  //workbench_moderation 

  $query = db_select('workbench_moderation_node_history', 'wmnh');
  $query->condition('wmnh.nid', $vars['nid']);
  $query->condition('wmnh.state', 'published');
  $query->addField('wmnh', 'stamp', 'publication_date');
  $query->orderBy('wmnh.stamp', 'ASC');
  $results = $query->execute();
  $publication_date = $results->fetchField();

  dsm($publication_date);
  dsm(format_date($publication_date, 'custom', 'Y-m-d H:i:s O'));
}

//
//function tic_quicktabs_alter($quicktabs) {
//  dpm($quicktabs);
//  foreach($quicktabs->tabs as $tab) {
//    if (!empty($tab['bid'])) {
////      $block = block_custom_block_get($tab['bid']);
//      $bid = explode('_delta_', $tab['bid']);
//      $module = $bid[0];
//      $delta = $bid[1];
//      $block = block_load($module, $delta);
//dpm($block);
//      
//    }
//  }
//}

/**
 * Implements of hook_services_resources().
 */
function tic_services_resources() {
  $api = array(
    'blog' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves posted blogs',
          'callback' => '_tic_blog_retrieve',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'fn',
              'type' => 'string',
              'description' => 'Function to perform',
              'source' => array('path' => '0'),
              'optional' => TRUE,
              'default' => '0',
            ),
            array(
              'name' => 'nitems',
              'type' => 'int',
              'description' => 'Number of latest items to get',
              'source' => array('param' => 'nitems'),
              'optional' => TRUE,
              'default' => '0',
            ),
            array(
              'name' => 'since',
              'type' => 'int',
              'description' => 'Posts from the last number of days',
              'source' => array('param' => 'since'),
              'optional' => TRUE,
              'default' => '0',
            ),
          ),
        ),
      ),
    ),
  );

  return
      $api;
}

/**
 * Callback function for blog retrieve
 */
function _tic_blog_retrieve($fn, $nitems, $timestamp) {
  // Check for mad values
  $nitems = intval($nitems);
  $timestamp = intval($timestamp);

  return tic_find_blog_items($nitems, $timestamp);
}


/**
* Gets blog posts
*/
function tic_find_blog_items($nitems, $timestamp) {
  // Compose query
  $query = db_select('node', 'n');
  $query->join('node_revision', 'v', '(n.nid = v.nid) AND (n.vid = v.vid)');
  $query->join('users', 'u', 'n.uid = u.uid');
  $query->join('field_data_body', 'b', '((b.entity_type = \'node\') AND (b.entity_id = n.nid) AND (b.revision_id = n.vid))');
  $query->fields('v', array('timestamp', 'title'));
  $query->addField('u', 'name', 'author');
  $query->addField('b', 'body_value', 'content');
  $query->condition('n.type', 'article', '=');
  // How many days ago?
  if ($timestamp) {
   $query->condition('v.timestamp', time() - ($timestamp * 60 * 60 * 24), '>');
  }
  $query->orderBy('v.timestamp', 'DESC');
  // Limited by items?
  if ($nitems) {
    $query->range(0, $nitems);
  }
  $items = $query->execute()->fetchAll();

  return
$items;
}




function tic_services_request_postprocess_alter($controller, $args, &$result) {

  
//  dd($controller);
//      dd($args); 
  unset($result['sticky']);
  
//      dd($result);
  
}
